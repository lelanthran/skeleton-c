# ######################################################################
# First, set your project name and version here.
PROJNAME=skeleton
VERSION=3.14.59

# ######################################################################
# These are used to create packages.

# First, the maintainer and project details
MAINTAINER=maintainer <maintainer-email@address.org>
HOMEPAGE=http://www.homepage.nonexistent.com

# The section that this software belongs in
SECTION=custom

# The dependencies for this software to run (not build). The dependencies for
# building are specified below in the EXTRA_LIBS section (and entries for build
# dependencies have to be in the HEADERS field).
#
# The dependencies must be specified as a comma-seperated list of package names,
# with an optional version of that package in parenthesis.
DEPENDS=

# Define a description that will go into the package.
#
define DESCRIPTION
A full description of your project.

The first line is a short synopsis of this project. Everything after is
a comprehensive description of the project.

Note that multiline works properly, and that any indentation herein
is preserved. To produce verbatim text indent each line with a single
space character.

endef

# You can set variables here the same way you do for standard Makefiles.
# Variables from the environment are used as well (so $(HOME) works as
# you would expect it to).
#
# For this example we use all the sources scattered in ../oos-files so
# it makes sense to define it as a variable.
OOS_DIR=../oos-files

# ######################################################################
# Set the main (executable) source files. These are all the source files
# that have a 'main' function. Note that you must specify the filename
# with the source extension. The extension of the program is dependent
# on the target system.
#
# Note that this list is only for C files.
MAIN_PROGRAM_CSOURCEFILES=\
   $(OOS_DIR)/c/src/c_prog1.c \
   $(OOS_DIR)/c/src/c_prog2.c \


# ######################################################################
# Set the main (executable) source files. These are all the source files
# that have a 'main' function. Note that you must specify the filename
# without the extension, so don't specify 'myfile.c', just specify
# 'myfile'.
#
# Note that this list is only for C++ files.
MAIN_PROGRAM_CPPSOURCEFILES=\
   $(OOS_DIR)/cpp/src/cpp_prog1.cpp \
   $(OOS_DIR)/cpp/src/cpp_prog2.cpp \


# ######################################################################
# All subdirectories of ./libraries/ are searched for a 'Makefile.inc'
# that the build will use to build a specific library. If there is a
# specific order that mst be followed, list only those libraries in
# this variable.
#
# A sample Makefile.inc is provided (Makefile.inc.sample).
#
FINAL_LIBRARIES=\
   module_1 \
   module_2 \


# ######################################################################
# Here you must set the list of include paths. Note that the variable
# $(HOME) is available if you have include directories relative to your
# home directory. $(HOME) works correctly on Windows as well.
#
# You can put as many paths in here as you want to. I've put one in as an
# example.
INCLUDE_PATHS=\
   $(HOME)/include

# ######################################################################
# This is similar to the INCLUDE_PATHS you set above, except that it is
# for the library search paths. $(HOME) is available if you have library
# directories relative to your home directory. $(HOME) works correctly
# on Windows as well.
#
# You can put as many paths in here as you want to. I've put one in as an
# example. See the variable LIBRARY_FILES to set the actual libraries you
# want to link in.
LIBRARY_PATHS=\
   $(HOME)/lib


# ######################################################################
# This is for specifying extra libraries. Note that you must only specify
# the library name, and neither the extension nor the prefix 'lib'.
#
# These files *MUST* be in the library search path specified with
# LIBRARY_PATHS.
#
# I've put in an example here that is commented out, so that you can see
# how the files are supposed to be specified but, because it is commented
# out, it will not break the build process if this library is not
# installed.
#
# (If it is not commented out, go ahead and comment it out when the build
# fails)
#LIBRARY_FILES=\
#  ds


# ######################################################################
# You can specify extra actions for different target architectures. The
# target architecture is automatically generated by gcc.
#

# ######################################################################
# Here you set extra compiler flags that are common to both the C++ and
# the C compiler. You can comment this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_COMPILER_FLAGS=\
   -DNAME=Value\
   -W -Wall


# ######################################################################
# Here you set extra compiler flags for the C compiler only. You can comment
# this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_CFLAGS=\
   -std=c99


# ######################################################################
# Here you set extra compiler flags for the C++ compiler only. You can
# comment this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_CXXFLAGS=\
   -std=c++11


# ######################################################################
# You can add in extra flags to the linker here, for the library. This
# does not override the existing flags, it adds to them.
#
EXTRA_LIB_LDFLAGS=\
   


# ######################################################################
# You can add in extra flags to the linker here, for the programs. This
# does not override the existing flags, it adds to them.
#
EXTRA_PROG_LDFLAGS=\
   


# ######################################################################
# The default compilers are gcc and g++. If you want to specify something
# different, this is the place to do it. This is useful if you want to
# cross-compile, or use a different gcc/g++ than the one in your path, or
# simply want to use clang instead.
#
# Note that only clang and gcc are supported (due to reliance on the
# compiler command-line options).
#
# You can comment this out with no ill-effects.
GCC=gcc
GXX=g++
LD_PROG=gcc
LD_LIB=gcc

# ######################################################################
# TODO: Add in a way to override the default linker
#


