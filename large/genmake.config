# ######################################################################
# First, set your meta-project name and version here.
PROJNAME=skeleton
VERSION=3.14.59

# ######################################################################
# List the sub-projects here. Each sub-project will have all of its
# sources compiled and linked into a single library file (.so/.dll and
# .a). The exception are those sources that have a `main()` entry point;
# they get compiled into a program and linked against all the libraries.
#
# Each of the sub-projects must reside in a subdirectory of the same name
# as the sub-project. The order specified here is the order of the
# dependencies.
SUBPROJS='
   proj-one
   proj-two
   proj-three
   '


# ######################################################################
# Set the main (executable) C source files. These are all the source
# files that have a 'main' function. Note that you must specify the
# filename without the extension, so don't specify 'myfile.c', just
# specify 'myfile'. The format of this setting is:
#     subproj-name/main-prog
# where `subprog-name` is a sub-project specified above and `main-prog`
# is the name of the file.
#
# Note that this list is only for C files.
MAIN_PROGRAM_CSOURCEFILES='
   proj-one/c_main
   proj-two/c_main
   proj-three/c_main
   '

# ######################################################################
# Set the main (executable) CPP source files. These are all the source
# files that have a 'main' function. Note that you must specify the
# filename without the extension, so don't specify 'myfile.c', just
# specify 'myfile'. The format of this setting is:
#     subproj-name/main-prog
# where `subprog-name` is a sub-project specified above and `main-prog`
# is the name of the file.
#
# Note that this list is only for C++ files.
MAIN_PROGRAM_CPPSOURCEFILES='
   proj-one/cpp_main
   proj-two/cpp_main
   proj-three/cpp_main
   '


# ######################################################################
# Here you must set the list of include paths. Note that the variable
# $(HOME) is available if you have include directories relative to your
# home directory. $(HOME) works correctly on Windows. Additionally all
# environment variables work here as well.
#
# You can put as many paths in here as you want to. I've put one in as an
# example.
INCLUDE_PATHS='
   $(HOME)/include
   '

# ######################################################################
# This is similar to the INCLUDE_PATHS you set above, except that it is
# for the library search paths. $(HOME) is available if you have library
# directories relative to your home directory. $(HOME) works correctly
# on Windows, and all environment variables work here as well.
#
# You can put as many paths in here as you want to. I've put one in as an
# example. See the variable LIBRARY_FILES to set the actual libraries you
# want to link in.
LIBRARY_PATHS='
   $(HOME)/lib
   '


# ######################################################################
# This is for specifying extra libraries. Note that you must only specify
# the library name, and neither the extension nor the prefix 'lib'.
#
# These files *MUST* be in the library search path specified with
# LIBRARY_PATHS.
#
# I've put in an example here that is commented out, so that you can see
# how the files are supposed to be specified but, because it is commented
# out, it will not break the build process if this library is not
# installed.
#
# (If it is not commented out, go ahead and comment it out when the build
# fails)
#LIBRARY_FILES=\
#   ds


# ######################################################################
# Here you set extra compiler flags that are common to both the C++ and
# the C compiler. You can comment this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_COMPILER_FLAGS='
   -DNAME=Value
   -W -Wall
   '


# ######################################################################
# Here you set extra compiler flags for the C compiler only. You can comment
# this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_CFLAGS='
   -std=c99
   '


# ######################################################################
# Here you set extra compiler flags for the C++ compiler only. You can
# comment this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_CXXFLAGS='
   -std=c++11
   '


# ######################################################################
# You can add in extra flags to the linker here, for the library. This
# does not override the existing flags, it adds to them.
#
EXTRA_LIB_LDFLAGS='
   '


# ######################################################################
# You can add in extra flags to the linker here, for the programs. This
# does not override the existing flags, it adds to them.
#
EXTRA_PROG_LDFLAGS='
   '


# ######################################################################
# The default compilers are gcc and g++. If you want to specify something
# different, this is the place to do it. This is useful if you want to
# cross-compile, or use a different gcc/g++ than the one in your path, or
# simply want to use clang instead.
#
# Note that only clang and gcc are supported (due to reliance on the
# compiler command-line options).
#
# You can comment this out with no ill-effects.
GCC=gcc
GXX=g++
LD_PROG=gcc
LD_LIB=gcc

# ######################################################################
# TODO: Add in a way to override the default linker
#


